%Robot Arm Simulator:

close all
clear all
clc
disp('STARTING ROBOT ARM')
    
h = figure(1);

%recording options
filename = 'QUTRC_RobotArm_Simulation.gif';
record = false;

%Starting configuration: q1,q2,q3,q4
q = deg2rad([0 135 -100 -90]);

%Joint Limits
qL = deg2rad([-45 45 -110 -90]);
qU = deg2rad([45 135 -20 -0]);
%Link lengths
L = [100 120 140 140];
%Speed:
dx_limit = 5; %mm/iteration

%Target points for colours red, green, yellow and blue:
red = [175 50 10 -pi/2];
xTg = [275 50 10 -pi/2];
xTy = [275 -50 10 -pi/2];
xTb = [175 -50 10 -pi/2];

%Define the target to reach as red:
xT = 

%Control Loop to Target
moving = true;
frame_count = 1; %iteration counter

while(moving)
    
    %Display robot arm and targets
    clf
    PlotRobotArm(q,L)
    plotsphere(red(1:3),10,'r')
    plotsphere(xTg(1:3),10,'g')
    plotsphere(xTy(1:3),10,'y')
    plotsphere(xTb(1:3),10,'b')
    pause(0.5) %frame rate
    
    %Record figure to gif
    if record == true
        recordFrame2gif(h,filename,frame_count);
        frame_count = frame_count + 1;
    end
    
    %Measure Toolpoint
    x = RobotArmForwardKinematics(q,L);
    
    %Check Target if within 10mm it is good enough
    if norm(xT(1:3) - x(1:3))<10
        moving = false;
        disp('Target was reached')
    else
        %Measure error velocity dx and apply speed limit:
        if norm(xT-x)>dx_limit
            dx = cap_mag(xT-x,dx_limit);
        end

        %Calculate Jacobian
        J = RobotArmJacobian(q,L);

        %Calculate psuedo-inverse Jacobian avoiding joint limits:
        inv_J = dampedLeastSquaresInverse(J,q,qL,qU);

        %Calculate the update step:
        dq = inv_J*dx';

        %Integrate for q
        q = q + dq';

        %Ensure joint limits are satisfied
        q = applyJointLimits(q,qL,qU);       

    end
end
